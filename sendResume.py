import requests
import json
import time
import os
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

# –í–∞—à access token
access_token = os.getenv("ACCESS_TOKEN")
# –í–∞—à ID —Ä–µ–∑—é–º–µ
resume_id = os.getenv("RESUME_ID")

# –§–∞–π–ª—ã –¥–ª—è —É—á–µ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
SENDED_FILE = 'sended'
ACTION_REQUIRED_FILE = 'action_required'
EXCLUDED_EMPLOYERS_FILE = 'excluded_employers'
ALREADY_APPLIED_FILE = 'already_applied'
LETTER_FILE = 'letter.txt'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open("cfg.json", "r", encoding="utf-8") as cfg_file:
    cfg = json.load(cfg_file)

keywords = cfg["keywords"]
excluded_cities = set(cfg["excluded_cities"])
excluded_words = set([w.lower() for w in cfg["excluded_words"]])
area = cfg["area"]
per_page = cfg["per_page"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json'
}

def read_ids(file_path):
    """–ß–∏—Ç–∞–µ—Ç ID –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞."""
    if not os.path.exists(file_path):
        return set()
    ids = set()
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            # –ò—â–µ–º –∫—É—Å–æ–∫ –≤–∏–¥–∞ "id: 123456"
            if "id:" in line:
                try:
                    parts = line.split("id:")[1].strip().split("|")[0]
                    vacancy_id = parts.strip()
                    ids.add(vacancy_id)
                except IndexError:
                    continue
    return ids

def read_letter():
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(LETTER_FILE, 'r', encoding='utf-8') as file:
            letter = file.read().strip()
            return letter if letter else None
    except FileNotFoundError:
        print(f"‚ö† Letter file '{LETTER_FILE}' not found. Will send applications without letter.")
        return None
    except Exception as e:
        print(f"‚ö† Error reading letter file: {e}")
        return None

def write_log(file_path, vacancy_id, name, city, reason=None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç ID + –Ω–∞–∑–≤–∞–Ω–∏–µ + –≥–æ—Ä–æ–¥ + –ø—Ä–∏—á–∏–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    date = datetime.now().strftime("%Y-%m-%d %H:%M")
    reason_text = f" | reason: {reason}" if reason else ""
    line = f"{date} | id: {vacancy_id} | {name} | {city}{reason_text}\n"
    with open(file_path, 'a', encoding='utf-8') as file:
        file.write(line)

def search_vacancies(page):
    """–ò—â–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    url = 'https://api.hh.ru/vacancies'
    params = {
        'text': " OR ".join(keywords),
        'per_page': per_page,
        'page': page,
        'area': area
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to search vacancies: {response.status_code} - {response.text}")
        return None

def apply_to_vacancy(vacancy_id, resume_id, name, city, letter=None):
    """–ü–æ–¥–∞–µ—Ç –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é."""
    url = f'https://api.hh.ru/negotiations'
    
    # –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ params, –≤–∫–ª—é—á–∞—è message
    params = {
        'vacancy_id': vacancy_id,
        'resume_id': resume_id
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –≤ params –µ—Å–ª–∏ –µ—Å—Ç—å
    if letter:
        params['message'] = letter
    
    response = requests.post(url, headers=headers, params=params)

    if response.status_code == 201:
        letter_status = "with letter" if letter else "without letter"
        print(f"‚úì Successfully applied to vacancy {vacancy_id} ({name} - {city}) [{letter_status}]")
        write_log(SENDED_FILE, vacancy_id, name, city)
        return "success"
    elif response.status_code == 403:
        response_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
        
        if 'already_applied' in response.text.lower():
            print(f"‚ö† Already applied to vacancy {vacancy_id} ({name} - {city})")
            write_log(ALREADY_APPLIED_FILE, vacancy_id, name, city, reason="already_applied")
            return "already_applied"
        elif 'letter required' in response.text.lower():
            print(f"üìù Letter required for vacancy {vacancy_id} ({name} - {city})")
            write_log(ACTION_REQUIRED_FILE, vacancy_id, name, city, reason="letter_required")
            return "action_required"
        elif 'test_required' in response.text.lower():
            print(f"üìã Test required for vacancy {vacancy_id} ({name} - {city})")
            write_log(ACTION_REQUIRED_FILE, vacancy_id, name, city, reason="test_required")
            return "action_required"
        else:
            print(f"‚ùå Access denied for vacancy {vacancy_id} ({name} - {city}): {response.text}")
            return "error"
    else:
        print(f"‚ùå Failed to apply to vacancy {vacancy_id} ({name} - {city}): {response.status_code} - {response.text}")
        return "error"

def contains_excluded_word(text, excluded_words):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–∞–∫–æ–µ-–ª–∏–±–æ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
    text_lower = text.lower()
    for word in excluded_words:
        if word.lower() in text_lower:
            return True
    return False

def main():
    page = 0
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ excluded_employers
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (sended, action_required, already_applied) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏
    excluded_employers = read_ids(EXCLUDED_EMPLOYERS_FILE)
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
    cover_letter = read_letter()
    if cover_letter:
        print(f"üìù Cover letter loaded: {len(cover_letter)} characters")
    else:
        print("üìù No cover letter found, sending applications without letter")
    
    successful_applications = 0
    total_processed = 0
    already_applied_count = 0
    action_required_count = 0
    excluded_by_employer_count = 0
    excluded_by_filter_count = 0

    print("üöÄ Starting vacancy application process...")
    
    while True:
        print(f"üìñ Processing page {page}...")
        vacancies_data = search_vacancies(page)
        if not vacancies_data or 'items' not in vacancies_data:
            break

        vacancies = vacancies_data['items']
        if not vacancies:
            break
            
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if page == 0:
            print(f"üìà Total vacancies found by API: {vacancies_data.get('found', 'unknown')}")
            print(f"üìà Total pages available: {vacancies_data.get('pages', 'unknown')}")
        
        print(f"üìÑ Page {page}: processing {len(vacancies)} vacancies")

        for vacancy in vacancies:
            vacancy_id = vacancy.get('id')
            employer_id = vacancy.get('employer', {}).get('id')
            city = vacancy.get('area', {}).get('name', '')
            name = vacancy.get('name', '')

            if not vacancy_id:
                print(f"‚ö† Skipping vacancy due to missing ID: {vacancy}")
                continue

            total_processed += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ excluded_employers
            if employer_id in excluded_employers:
                print(f"üö´ Skipping vacancy from excluded employer: {employer_id}")
                excluded_by_employer_count += 1
                continue

            name_lower = name.lower()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            if city not in excluded_cities and any(kw.lower() in name_lower for kw in keywords):
                if not contains_excluded_word(name_lower, excluded_words):
                    print(f"üéØ Applying to: {name} - {city}")
                    result = apply_to_vacancy(vacancy_id, resume_id, name, city, cover_letter)
                    if result == "success":
                        successful_applications += 1
                    elif result == "already_applied":
                        already_applied_count += 1
                    elif result == "action_required":
                        action_required_count += 1
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    time.sleep(1)
                else:
                    print(f"üö´ Excluded by word filter: {name}")
                    excluded_by_filter_count += 1
            else:
                print(f"‚è≠ Excluded by city or keyword filter: {name} - {city}")
                excluded_by_filter_count += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if vacancies_data['pages'] - 1 == page:
            break

        page += 1

    print(f"\nüìä Summary:")
    print(f"Total processed: {total_processed}")
    print(f"‚úÖ Successful applications: {successful_applications}")
    print(f"‚ö† Already applied: {already_applied_count}")
    print(f"üìù Action required (letter/test): {action_required_count}")
    print(f"üö´ Excluded by employer: {excluded_by_employer_count}")
    print(f"‚è≠ Excluded by filters: {excluded_by_filter_count}")
    print(f"‚úÖ Process completed!")

if __name__ == "__main__":
    main()
